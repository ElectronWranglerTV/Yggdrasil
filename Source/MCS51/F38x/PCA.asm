;* Yggdrasil (TM) Core Operating System (MCS-51): Silicon Labs C8051F38x Programmable Counter Array (PCA) Library
;* Copyright (C) DeRemee Systems, IXE Electronics LLC
;* Portions copyright IXE Electronics LLC, Republic Robotics, FemtoLaunch, FemtoSat, FemtoTrack, Weland
;* This work is made available under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
;* To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.

$INCLUDE (System.inc)

EXTRN CODE  (MATHBIU2XM1)
EXTRN CODE  (OSCFREQGET)

PUBLIC  LPCACCFCLR,     LPCACCFGET,   LPCACCFSET, LPCACFCLR
PUBLIC  LPCACFGET,      LPCACFSET,    LPCACRGET,  LPCAECOMCLR
PUBLIC  LPCAECOMSET,    LPCARUN,      LPCASTOP,   LPCAMODEPWM8
PUBLIC  LPCAMODEPWM16,  LPCAPWMSIZE,  LPCACPWR,   LPCACPHWR
PUBLIC  LPCACPLWR

PCA_ABSTRACTION SEGMENT CODE
RSEG  PCA_ABSTRACTION


;CLEARS THE SPECIFIED CPM FLAG FOR THE SPECIFIED PCA MODULE
;NOT FOR USE OUTSIDE THIS LIBRARY. DOES NOT CHECK VALIDITY
;OF MODULE AND FLAG NUMBERS
;ON ENTRY:
; ACC.3-ACC.0 = FLAG NUMBER
; ACC.7-ACC.4 = MODULE NUMBER
;ON RETURN:
; NONE
PCACPMCLR	PROC
    ;SAVE REGISTERS
    PUSH  B
    MOV   B, A
    ;CALCULATE FLAG INDEX
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    XCH   A, B
    ;DETERMINE PCA MODULE
    SWAP  A
    ANL   A, #0x07
    JNZ   PCACPMCLRA
    ;MODULE 0
    MOV   A, B
    ANL   PCA0CPM0, A
    SJMP  PCACPMCLRE
  PCACPMCLRA:
    DEC   A
    JNZ   PCACPMCLRB
    ;MODULE 1
    MOV   A, B
    ANL   PCA0CPM1, A
    SJMP  PCACPMCLRE
  PCACPMCLRB:
    DEC   A
    JNZ   PCACPMCLRC
    ;MODULE 2
    MOV   A, B
    ANL   PCA0CPM2, A
    SJMP  PCACPMCLRE
  PCACPMCLRC:
    DEC   A
    JNZ   PCACPMCLRD
    ;MODULE 3
    MOV   A, B
    ANL   PCA0CPM3, A
    SJMP  PCACPMCLRE
  PCACPMCLRD:
    ;MODULE 4
    MOV   A, B
    ANL   PCA0CPM4, A
  PCACPMCLRE:
    ;RESTORE REGISTERS & RETURN
    POP   B
    RET
ENDP


;SETS THE SPECIFIED CPM FLAG FOR THE SPECIFIED PCA MODULE
;NOT FOR USE OUTSIDE THIS LIBRARY. DOES NOT CHECK VALIDITY
;OF MODULE AND FLAG NUMBERS
;ON ENTRY:
; ACC.3-ACC.0 = FLAG NUMBER
; ACC.7-ACC.4 = MODULE NUMBER
;ON RETURN:
; NONE
PCACPMSET PROC
    ;SAVE REGISTERS
    PUSH  B
    MOV   B, A
    ;CALCULATE FLAG INDEX
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    XCH   A, B
    ;DETERMINE PCA MODULE
    SWAP  A
    ANL   A, #0x07
    JNZ   PCACPMSETA
    ;MODULE 0
    MOV   A, B
    ORL   PCA0CPM0, A
    SJMP  PCACPMSETE
  PCACPMSETA:
    DEC   A
    JNZ   PCACPMSETB
    ;MODULE 1
    MOV   A, B
    ORL   PCA0CPM1, A
    SJMP  PCACPMSETE
  PCACPMSETB:
    DEC   A
    JNZ   PCACPMSETC
    ;MODULE 2
    MOV   A, B
    ORL   PCA0CPM2, A
    SJMP  PCACPMSETE
  PCACPMSETC:
    DEC   A
    JNZ   PCACPMSETD
    ;MODULE 3
    MOV   A, B
    ORL   PCA0CPM3, A
    SJMP  PCACPMSETE
  PCACPMSETD:
    ;MODULE 4
    MOV   A, B
    ORL   PCA0CPM4, A
  PCACPMSETE:
    ;RESTORE REGISTERS & RETURN
    POP   B
    RET
ENDP


;CLEARS THE SPECIFIED CHANNEL'S CCF FLAG
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCACCFCLR  PROC
    CJNE  A, #0x05, LPCACCFCLRB
    LPCACCFCLRA:
    MOV   A, #0x00
    SETB  C
    RET
  LPCACCFCLRB:
    JC    LPCACCFCLRA
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   PCA0CN, A
    CLR   A
    CLR   C
    RET
ENDP


;COPIES THE SPECIFIED CHANNEL'S CCF FLAG TO C
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCACCFGET  PROC
    CJNE  A, #0x05, LPCACCFGETB
  LPCACCFGETA:
    MOV   A, #0x00
    SETB  C
    RET
  LPCACCFGETB:
    JC    LPCACCFGETA
  LPCACCFGETC:
    RRC   A
    DJNZ  ACC, LPCACCFGETC
    RET
ENDP


;SETS THE SPECIFIED CHANNEL'S CCF FLAG
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCACCFSET  PROC
    CJNE  A, #0x05, LPCACCFSETB
  LPCACCFSETA:
    MOV   A, #0x00
    SETB  C
    RET
  LPCACCFSETB:
    JC    LPCACCFSETA
    CALL  MATHBIU2XM1
    INC   A
    ORL   PCA0CN, A
    CLR   A
    CLR   C
    RET
ENDP


;CLEARS THE CF FLAG
LPCACFCLR:
  CLR   CF
  CLR   C
  RET


;COPIES THE VALUE OF CF TO C
LPCACFGET:
  MOV   C, CF
  RET


;SETS THE CF FLAG
LPCACFSET:
  SETB  CF
  CLR   C
  RET


;COPIES THE VALUE OF CR TO C
LPCACRGET:
  MOV   C, CR
  RET


;LOADS THE 8-BIT VALUE INTO THE SPECIFIED PCA MODULE'S
;HIGH CAPTURE REGISTER
;ON ENTRY:
; ACC.3 - ACC.0 = MODULE NUMBER
; ACC.7 - ACC.4 = ARRAY NUMBER
; R0            = VALUE
;ON RETURN:
; R0  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPCACPHWR	PROC
    ;CHECK FOR INVALID ARRAY NUMBER
    PUSH  ACC
    ANL   A, #0xF0
    JZ    LPCACPHWRA
    ;ERROR - INVALID ARRAY ID
    POP   ACC
    MOV   A, #PCA_ERR_INV_ARRAY
    SETB  C
    RET
  LPCACPHWRA:
    POP   ACC
    JNZ   LPCACPHWRB
    ;MODULE 0
    MOV   PCA0CPH0, R0
    CLR   C
    RET
  LPCACPHWRB:
    DEC   A
    JNZ   LPCACPHWRC
    ;MODULE 1
    MOV   PCA0CPH1, R0
    CLR   C
    RET
  LPCACPHWRC:
    DEC   A
    JNZ   LPCACPHWRD
    ;MODULE 2
    MOV   PCA0CPH2, R0
    CLR   C
    RET
  LPCACPHWRD:
    DEC   A
    JNZ   LPCACPHWRE
    ;MODULE 3
    MOV   PCA0CPH3, R0
    CLR   C
    RET
  LPCACPHWRE:
    DEC   A
    JNZ   LPCACPHWRF
    ;MODULE 4
    MOV   PCA0CPH4, R0
    CLR   C
    RET
  LPCACPHWRF:
    ;ERROR - INVALID MODULE ID
    MOV   A, #PCA_ERR_INV_MODULE
    SETB  C
    RET
ENDP


;LOADS THE 8-BIT VALUE INTO THE SPECIFIED PCA MODULE'S
;LOW CAPTURE REGISTER
;ON ENTRY:
; ACC.3 - ACC.0 = MODULE NUMBER
; ACC.7 - ACC.4 = ARRAY NUMBER
; R0            = VALUE
;ON RETURN:
; R0  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPCACPLWR PROC
    ;CHECK FOR INVALID ARRAY NUMBER
    PUSH  ACC
    ANL   A, #0xF0
    JZ    LPCACPLWRA
    ;ERROR - INVALID ARRAY ID
    POP   ACC
    MOV   A, #PCA_ERR_INV_ARRAY
    SETB  C
    RET
  LPCACPLWRA:
    POP   ACC
    JNZ   LPCACPLWRB
    ;MODULE 0
    MOV   PCA0CPL0, R0
    CLR   C
    RET
  LPCACPLWRB:
    DEC   A
    JNZ   LPCACPLWRC
    ;MODULE 1
    MOV   PCA0CPL1, R0
    CLR   C
    RET
  LPCACPLWRC:
    DEC   A
    JNZ   LPCACPLWRD
    ;MODULE 2
    MOV   PCA0CPL2, R0
    CLR   C
    RET
  LPCACPLWRD:
    DEC   A
    JNZ   LPCACPLWRE
    ;MODULE 3
    MOV   PCA0CPL3, R0
    CLR   C
    RET
  LPCACPLWRE:
    DEC   A
    JNZ   LPCACPLWRF
    ;MODULE 4
    MOV   PCA0CPL4, R0
    CLR   C
    RET
  LPCACPLWRF:
    ;ERROR - INVALID MODULE ID
    MOV   A, #PCA_ERR_INV_MODULE
    SETB  C
    RET
ENDP


;LOADS THE 16-BIT VALUE INTO THE SPECIFIED PCA MODULE'S
;CAPTURE REGISTERS
;ON ENTRY:
; ACC.3 - ACC.0 = MODULE NUMBER
; ACC.7 - ACC.4 = ARRAY NUMBER
; R0            = VALUE LSB
; R1            = VALUE MSB
;ON RETURN:
; R0  = VALUE ON ENTRY
; R1  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPCACPWR  PROC
    ;CHECK FOR INVALID ARRAY NUMBER
    PUSH  ACC
    ANL   A, #0xF0
    JZ    LPCACPWRA
    ;ERROR - INVALID ARRAY ID
    POP   ACC
    MOV   A, #PCA_ERR_INV_ARRAY
    SETB  C
    RET
  LPCACPWRA:
    POP   ACC
    JNZ   LPCACPWRB
    ;MODULE 0
    MOV   PCA0CPL0, R0
    MOV   PCA0CPH0, R1
    CLR   C
    RET
  LPCACPWRB:
    DEC   A
    JNZ   LPCACPWRC
    ;MODULE 1
    MOV   PCA0CPL1, R0
    MOV   PCA0CPH1, R1
    CLR   C
    RET
  LPCACPWRC:
    DEC   A
    JNZ   LPCACPWRD
    ;MODULE 2
    MOV   PCA0CPL2, R0
    MOV   PCA0CPH2, R1
    CLR   C
    RET
  LPCACPWRD:
    DEC   A
    JNZ   LPCACPWRE
    ;MODULE 3
    MOV   PCA0CPL3, R0
    MOV   PCA0CPH3, R1
    CLR   C
    RET
  LPCACPWRE:
    DEC   A
    JNZ   LPCACPWRF
    ;MODULE 4
    MOV   PCA0CPL4, R0
    MOV   PCA0CPH4, R1
    CLR   C
    RET
  LPCACPWRF:
    ;ERROR - INVALID MODULE ID
    MOV   A, #PCA_ERR_INV_MODULE
    SETB  C
    RET
ENDP


;CLEARS THE ECOM BIT FOR THE SPECIFIED PCA MODULE
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCAECOMCLR PROC
    CJNE  A, #0x05, LPCAECOMCLRB
    LPCAECOMCLRA:
    MOV   A, #0x00
    SETB  C
    RET
  LPCAECOMCLRB:
    JC    LPCAECOMCLRA
    SWAP  A
    ORL   A, #BIT_INDEX_ECOM
    CALL  PCACPMCLR
    CLR   A
    CLR   C
    RET
ENDP


;SETS THE ECOM BIT FOR THE SPECIFIED PCA MODULE
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCAECOMSET PROC
    CJNE  A, #0x05, LPCAECOMSETB
  LPCAECOMSETA:
    MOV   A, #0x00
    SETB  C
    RET
  LPCAECOMSETB:
    JC    LPCAECOMSETA
    SWAP  A
    ORL   A, #BIT_INDEX_ECOM
    CALL  PCACPMSET
    CLR   A
    CLR   C
    RET
ENDP


;SETS THE SPECIFIED PCA MODULE MODE TO 8-BIT PWM
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCAMODEPWM8  PROC
    CJNE  A, #0x05, LPCAMODEPWM8B
    LPCAMODEPWM8A:
    MOV   A, #0x00
    SETB  C
    RET
  LPCAMODEPWM8B:
    JNC   LPCAMODEPWM8A
    JNZ   LPCAMODEPWM8C
    ;MODULE 0
    MOV   PCA0CPM0, #0x42
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM8C:
    DEC   A
    JNZ   LPCAMODEPWM8D
    ;MODULE 1
    MOV   PCA0CPM1, #0x42
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM8D:
    DEC   A
    JNZ   LPCAMODEPWM8E
    ;MODULE 2
    MOV   PCA0CPM2, #0x42
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM8E:
    DEC   A
    JNZ   LPCAMODEPWM8F
    ;MODULE 3
    MOV   PCA0CPM3, #0x42
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM8F:
    ;MODULE 4
    MOV   PCA0CPM4, #0x42
    CLR   A
    CLR   C
    RET
ENDP


;SETS THE SPECIFIED PCA MODULE MODE TO 16-BIT PWM
;ON ENTRY:
; ACC.3-ACC.0 = PCA MODULE NUMBER
; ACC.7-ACC.4 = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCAMODEPWM16 PROC
    CJNE  A, #0x05, LPCAMODEPWM16B
    LPCAMODEPWM16A:
    MOV   A, #0x00
    SETB  C
    RET
  LPCAMODEPWM16B:
    JC    LPCAMODEPWM16A
    JNZ   LPCAMODEPWM16C
    ;MODULE 0
    MOV   PCA0CPM0, #0xC2
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM16C:
    DEC   A
    JNZ   LPCAMODEPWM16D
    ;MODULE 1
    MOV   PCA0CPM1, #0xC2
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM16D:
    DEC   A
    JNZ   LPCAMODEPWM16E
    ;MODULE 2
    MOV   PCA0CPM2, #0xC2
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM16E:
    DEC   A
    JNZ   LPCAMODEPWM16F
    ;MODULE 3
    MOV   PCA0CPM3, #0xC2
    CLR   A
    CLR   C
    RET
  LPCAMODEPWM16F:
    ;MODULE 4
    MOV   PCA0CPM4, #0xC2
    CLR   A
    CLR   C
    RET
ENDP


;RETURNS THE PWM COUNT SIZE FOR THE SPECIFIED PCA MODULE
;ON ENTRY:
; ACC.7 - ACC.4 = ARRAY ID
; ACC.3 - ACC.0 = MODULE ID
;ON RETURN:
; C = 0 IF SUCCESS
;   A = 0x00
; C = 1 IF FAIL
;   A = ERROR CODE
LPCAPWMSIZE PROC
    ;CHECK FOR VALID ARRAY ID
    PUSH  ACC
    ANL   A, #0xF0
    JZ    LPCAPWMSIZEJ
    ;ERROR - INVALID ARRAY ID
    POP   ACC
    MOV   A, #PCA_ERR_INV_ARRAY
    SETB  C
    RET
  LPCAPWMSIZEJ:
    ;ARRAY ID VALID
    POP   ACC
    JNZ   LPCAPWMSIZED
    ;MODULE 0
    MOV   A, PCA0CPM0
  LPCAPWMSIZEA:
    JB    BIT_PWM, LPCAPWMSIZEB
    ;ERROR - PWM NOT ENABLED
    MOV   A, #PCA_ERR_PWM_DISABLED
    SETB  C
    RET
  LPCAPWMSIZEB:
    ;CHECK FOR 16 BIT MODE
    JB    BIT_PWM16, LPCAPWMSIZEC
    ;8 BIT MODE ENABLED
    MOV   A, #0x08
    CLR   C
    RET
  LPCAPWMSIZEC:
    ;16 BIT MODE ENABLED
    MOV   A, #0x10
    CLR   C
    RET
  LPCAPWMSIZED:
    DEC   A
    JNZ   LPCAPWMSIZEE
    ;MODULE 1
    MOV   A, PCA0CPM1
    SJMP  LPCAPWMSIZEA
  LPCAPWMSIZEE:
    DEC   A
    JNZ   LPCAPWMSIZEF
    ;MODULE 2
    MOV   A, PCA0CPM2
    SJMP  LPCAPWMSIZEA
  LPCAPWMSIZEF:
    DEC   A
    JNZ   LPCAPWMSIZEG
    ;MODULE 3
    MOV   A, PCA0CPM3
    SJMP  LPCAPWMSIZEA
  LPCAPWMSIZEG:
    DEC   A
    JNZ   LPCAPWMSIZEH
    ;MODULE 4
    MOV   A, PCA0CPM4
    SJMP  LPCAPWMSIZEA
  LPCAPWMSIZEH:
    ;ERROR - INVALID MODULE ID
    MOV   A, #PCA_ERR_INV_MODULE
    SETB  C
    RET
ENDP


;STARTS PCA 0 COUNTER
;ON ENTRY:
; A = PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = VALUE ON ENTRY
; C = 1 IF INVALID ID
;   A = ERROR CODE
LPCARUN PROC
  JNZ   LPCARUNA
  SETB  CR
  CLR   C
  RET
LPCARUNA:
  SETB  C
  RET
ENDP


;STOPS PCA 0 COUNTER
;ON ENTRY:
; A	= PCA ARRAY NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A = VALUE ON ENTRY
; C = 1 IF INVALID ID
;   A = ERROR CODE
LPCASTOP  PROC
    JNZ   LPCASTOPA
    CLR   CR
    CLR   C
    RET
  LPCASTOPA:
    SETB  C
    RET
ENDP
