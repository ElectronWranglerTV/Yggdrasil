;* Yggdrasil (TM) Core Operating System (MCS-51): Silicon Labs C8150F38x Ports Library
;* Copyright (C) DeRemee Systems, IXE Electronics LLC
;* Portions copyright IXE Electronics LLC, Republic Robotics, FemtoLaunch, FemtoSat, FemtoTrack, Weland
;* This work is made available under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
;* To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.

$INCLUDE (System.INC)

#include "Ports_ReturnCodes.inc"

EXTRN CODE  (MATHBIU2XM1)

PUBLIC  LPORTANALOG,    LPORTBITCLR,    LPORTBITCPL,  LPORTBITCPY
PUBLIC  LPORTBITREAD,   LPORTBITSET,    LPORTBITWR,   LPORTBITVALID
PUBLIC  LPORTINITDEF,   LPORTDIGITAL,   LPORTSKIPBIT, LPORTUNSKIPBIT
PUBLIC  LPORTBYTERD,    LPORTBYTEWR,    LPORTBITOD,   LPORTBITPP
PUBLIC  LPORTOD,        LPORTPP,        LPORTSKIPALL, LPORTUNSKIPALL
PUBLIC  LPORTMODEINWR,  LPORTMODEOUTWR, LPORTSKIPWR

PORT_ABSTRACTION  SEGMENT CODE
RSEG  PORT_ABSTRACTION

;CONFIGURES THE SELECTED BIT OF THE SELECTED PORT FOR ANALOG OPERATION
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTANALOG PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTANALOGA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTANALOGA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTANALOGB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P0MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTANALOGB:
    DJNZ  ACC, LPORTANALOGC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTANALOGC:
    DJNZ  ACC, LPORTANALOGD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTANALOGD:
    DJNZ  ACC, LPORTANALOGE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTANALOGE:
    DJNZ  ACC, LPORTANALOGF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P4MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTANALOGF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;CLEARS THE SELECTED BIT OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITCLR PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTBITCLRA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITCLRA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITCLRB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P0, A
    CLR   C
    CLR   A
    RET
  LPORTBITCLRB:
    DJNZ  ACC, LPORTBITCLRC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1, A
    CLR   C
    CLR   A
    RET
  LPORTBITCLRC:
    DJNZ  ACC, LPORTBITCLRD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2, A
    CLR   C
    CLR   A
    RET
  LPORTBITCLRD:
    DJNZ  ACC, LPORTBITCLRE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3, A
    CLR   C
    CLR   A
    RET
  LPORTBITCLRE:
    DJNZ  ACC, LPORTBITCLRF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P4, A
    CLR   C
    CLR   A
    RET
  LPORTBITCLRF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;COPIES THE SELECTED BIT OF THE SOURCE PORT
;TO THE SELECTED BIT OF THE DESTINATION PORT
;ON ENTRY:
; ACC.7 - ACC.4 = DESTINATION PORT NUMBER
; ACC.3 - ACC.0 = DESTINATION BIT NUMBER
; B.7 - B.4     = SOURCE PORT NUMBER
; B.3 - B.0     = SOURCE BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITCPY PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTBITCPYA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITCPYA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITCPYB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    ANL   A, P0
    CLR   C
    CLR   A
    RET
  LPORTBITCPYB:
    DJNZ  ACC, LPORTBITCPYC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPYC:
    DJNZ  ACC, LPORTBITCPYD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPYD:
    DJNZ  ACC, LPORTBITCPYE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPYE:
    DJNZ  ACC, LPORTBITCPYF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P4, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPYF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;COMPLIMENTS THE SELECTED BIT OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITCPL PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTBITCPLA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITCPLA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITCPLB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    XRL   P0, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPLB:
    DJNZ  ACC, LPORTBITCPLC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    XRL   P1, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPLC:
    DJNZ  ACC, LPORTBITCPLD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    XRL   P2, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPLD:
    DJNZ  ACC, LPORTBITCPLE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    XRL   P3, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPLE:
    DJNZ  ACC, LPORTBITCPLF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    XRL   P4, A
    CLR   C
    CLR   A
    RET
  LPORTBITCPLF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;COPIES THE SPECIFIED BIT OF THE SPECIFIED PORT TO
;THE CARRY FLAG
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; A = 0 ON SUCCESS
; A != 0 ON FAIL
;   A = ERROR CODE
LPORTBITREAD  PROC
    ;ENSURE SOURCE BIT INDEX IS VALID
    JNB   ACC.3, LPORTBITREADB
  LPORTBITREADA:
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITREADB:
  LPORTBITREADC:
    ;BIT INDICIES VALID
    XCH   A, R0
    PUSH  ACC
    MOV   A, R0
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    MOV   R0, A
    JNZ   LPORTBITREADD
    ;PORT 0
    MOV   A, P0
    SJMP  LPORTBITREADH
  LPORTBITREADD:
    DJNZ  R0, LPORTBITREADE
    ;PORT 1
    MOV   A, P1
    SJMP  LPORTBITREADH
  LPORTBITREADE:
    DJNZ  R0, LPORTBITREADF
    ;PORT 2
    MOV   A, P2
    SJMP  LPORTBITREADH
  LPORTBITREADF:
    DJNZ  R0, LPORTBITREADG
    ;PORT 3
    MOV   A, P3
    SJMP  LPORTBITREADH
  LPORTBITREADG:
    DJNZ  R0, LPORTBITREADI
    ;PORT 4
    MOV   A, P4
  LPORTBITREADH:
    ;SHIFT SPECIFIED BIT INTO C
    MOV   R0, A
    POP   ACC
    ANL   A, #0x07
    INC   A
    XCH   A, R0
    CALL  LPORTSHR
    ;RETURN
    POP   ACC
    MOV   R0, A
    CLR   A
    RET
  LPORTBITREADI:
    ;INVALID PORT
    POP   ACC
    POP   ACC
    MOV   R0, A
    MOV   A, #PORT_ERR_INV_PORT
    MOV   R0, #0x00
    SETB  C
    RET
ENDP


;SETS THE SELECTED BIT OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITSET PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTBITSETA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITSETA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITSETB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    ORL   P0, A
    CLR   C
    CLR   A
    RET
  LPORTBITSETB:
    DJNZ  ACC, LPORTBITSETC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P1, A
    CLR   C
    CLR   A
    RET
  LPORTBITSETC:
    DJNZ  ACC, LPORTBITSETD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P2, A
    CLR   C
    CLR   A
    RET
  LPORTBITSETD:
    DJNZ  ACC, LPORTBITSETE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P3, A
    CLR   C
    CLR   A
    RET
  LPORTBITSETE:
    DJNZ  ACC, LPORTBITSETF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P4, A
    CLR   C
    CLR   A
    RET
  LPORTBITSETF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;CHECKS THE VALIDITY OF THE SPECIFIED PORT & BIT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 IF PORT/BIT VALID
;   A = VALUE ON ENTRY
; C = 1 IF PORT/BIT INVALID
;   A = ERROR CODE
LPORTBITVALID PROC
    ;SAVE REGISTERS
    PUSH  DPL
    PUSH  DPH
    PUSH  B
    PUSH  ACC
    ;ISOLATE PORT NUMBER
    SWAP  A
    ANL   A, #0x0F
    MOV   B, A
    ;COMPARE TO PORT COUNT
    MOV   DPTR, #LPORTTABLE
    MOVX  A, @DPTR
    XCH   A, B
    CJNE  A, B, LPORTBITVALIDD
    ;INVALID PORT NUMBER
  LPORTBITVALIDA:
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
  LPORTBITVALIDB:
    SETB  C
  LPORTBITVALIDC:
    ;RESTORE REGISTERS & RETURN
    POP   B
    POP   DPH
    POP   DPL
    RET
  LPORTBITVALIDD:
    JC    LPORTBITVALIDA
    ;VALID PORT NUMBER
    ;CALCULATE TABLE ENTRY FOR PORT NUMBER
    INC   DPTR
    CALL  DPTRBADD
    ;MASK PORT OUT
    POP   ACC
    PUSH  ACC
    ANL   A, #0x0F
    MOV   B, A
    ;LOAD BIT ENTRY FOR PORT
    MOVX  A, @DPTR
    XCH   A, B
    CJNE  A, B, LPORTBITVALIDF
    ;INVALID BIT NUMBER
  LPORTBITVALIDE:
    POP   ACC
    MOV   A, #PORT_ERR_INV_BIT
    JMP   LPORTBITVALIDB
  LPORTBITVALIDF:
    JC    LPORTBITVALIDE
    ;VALID BIT NUMBER
    POP   ACC
    CLR   C
    JMP   LPORTBITVALIDC
ENDP


;COPIES THE SPECIFIED BIT OF R1 TO THE SPECIFIED
;BIT OF THE SPECIFIED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = PORT BIT NUMBER
; R0.3 -  R0.0  = BIT NUMBER
; R1            = VALUE
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
;   R0 = VALUE
; C = 1 ON FAIL
;   A = ERROR CODE
;   R0 = 0x00
LPORTBITWR  PROC
    ;ENSURE SOURCE BIT INDEX IS VALID
    JNB   ACC.3, LPORTBITWRB
  LPORTBITWRA:
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    MOV   R0, #0x00
    SETB  C
    RET
  LPORTBITWRB:
    ;ENSURE DESTINATION BIT INDEX IS VALID
    XCH   A, R0
    PUSH  ACC
    ANL   A, #0xF8
    JZ    LPORTBITWRC
    ;INVALID DESTINATION BIT INDEX
    POP   ACC
    SJMP  LPORTBITWRA
  LPORTBITWRC:
    ;BIT INDICIES VALID
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITWRD
    ;PORT 0
    MOV   A, P0
    SJMP  LPORTBITWRH
  LPORTBITWRD:
    DJNZ  ACC, LPORTBITWRE
    ;PORT 1
    MOV   A, P1
    SJMP  LPORTBITWRH
  LPORTBITWRE:
    DJNZ  ACC, LPORTBITWRF
    ;PORT 2
    MOV   A, P2
    SJMP  LPORTBITWRH
  LPORTBITWRF:
    DJNZ  ACC, LPORTBITWRG
    ;PORT 3
    MOV   A, P3
    SJMP  LPORTBITWRH
  LPORTBITWRG:
    DJNZ  ACC, LPORTBITWRI
    ;PORT 4
    MOV   A, P4
  LPORTBITWRH:
    ;SHIFT SPECIFIED BIT INTO ACC.0
    CALL  LPORTSHR
    MOV   R0, A
    ;SHIFT BIT INTO FINAL POSITION
    POP   ACC
    XCH   A, R0
    CALL  LPORTSHL
    ;RETURN
    MOV   R0, #0x00
    CLR   C
    RET
  LPORTBITWRI:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    MOV   R0, #0x00
    SETB  C
    RET
ENDP


;READS A BYTE FROM THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = DATA
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBYTERD PROC
    SWAP  A
    JNZ   LPORTBYTERDA
    ;PORT 0
    PUSH  P0MDOUT
    MOV   P0MDOUT, #0x00
    MOV   P0, #0xFF
    MOV   A, P0
    POP   P0MDOUT
    CLR   C
    RET
  LPORTBYTERDA:
    DEC   A
    JNZ   LPORTBYTERDB
    ;PORT 1
    PUSH  P1MDOUT
    MOV   P1MDOUT, #0x00
    MOV   P1, #0xFF
    MOV   A, P1
    POP   P1MDOUT
    CLR   C
    RET
  LPORTBYTERDB:
    DEC   A
    JNZ   LPORTBYTERDC
    ;PORT 2
    PUSH  P2MDOUT
    MOV   P2MDOUT, #0x00
    MOV   P2, #0xFF
    MOV   A, P2
    POP   P2MDOUT
    CLR   C
    RET
  LPORTBYTERDC:
    DEC   A
    JNZ   LPORTBYTERDD
    ;PORT 3
    PUSH  P3MDOUT
    MOV   P3MDOUT, #0x00
    MOV   P3, #0xFF
    MOV   A, P3
    POP   P3MDOUT
    CLR   C
    RET
  LPORTBYTERDD:
    DEC   A
    JNZ   LPORTBYTERDE
    ;PORT 4
    PUSH  P4MDOUT
    MOV   P4MDOUT, #0x00
    MOV   P4, #0xFF
    MOV   A, P4
    POP   P4MDOUT
    CLR   C
    RET
  LPORTBYTERDE:
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;WRITES A BYTE TO THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; R0            = DATA
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBYTEWR PROC
    SWAP  A
    JNZ   LPORTBYTEWRA
    ;PORT 0
    MOV   P0, R0
    CLR   C
    RET
  LPORTBYTEWRA:
    DEC   A
    JNZ   LPORTBYTEWRB
    ;PORT 1
    MOV   P1, R0
    CLR   C
    RET
  LPORTBYTEWRB:
    DEC   A
    JNZ   LPORTBYTEWRC
    ;PORT 2
    MOV   P2, R0
    CLR   C
    RET
  LPORTBYTEWRC:
    DEC   A
    JNZ   LPORTBYTEWRD
    ;PORT 3
    MOV   P3, R0
    CLR   C
    RET
  LPORTBYTEWRD:
    DEC   A
    JNZ   LPORTBYTEWRE
    ;PORT 4
    MOV   P4, R0
    CLR   C
    RET
  LPORTBYTEWRE:
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;CONFIGURES THE SELECTED BIT OF THE SELECTED PORT FOR DIGITAL OPERATION
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTDIGITAL  PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTDIGITALA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTDIGITALA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTDIGITALB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    ORL   P0MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTDIGITALB:
    DJNZ  ACC, LPORTDIGITALC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P1MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTDIGITALC:
    DJNZ  ACC, LPORTDIGITALD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P2MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTDIGITALD:
    DJNZ  ACC, LPORTDIGITALE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P3MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTDIGITALE:
    DJNZ  ACC, LPORTDIGITALF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P4MDIN, A
    CLR   C
    CLR   A
    RET
  LPORTDIGITALF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


LPORTINITDEF:
  ;CONFIGURE PORT 0
  MOV   P0, #PORT_0_DEFAULT_VALUE
  MOV   P0MDIN, #PORT_0_DEFAULT_IN
  MOV   P0MDOUT, #PORT_0_DEFAULT_OUT
  MOV   P0SKIP, #PORT_0_DEFAULT_SKIP
  ;CONFIGURE PORT 1
  MOV   P1, #PORT_1_DEFAULT_VALUE
  MOV   P1MDIN, #PORT_1_DEFAULT_IN
  MOV   P1MDOUT, #PORT_1_DEFAULT_OUT
  MOV   P1SKIP, #PORT_1_DEFAULT_SKIP
  ;CONFIGURE PORT 2
  MOV   P2, #PORT_2_DEFAULT_VALUE
  MOV   P2MDIN, #PORT_2_DEFAULT_IN
  MOV   P2MDOUT, #PORT_2_DEFAULT_OUT
  MOV   P2SKIP, #PORT_2_DEFAULT_SKIP
  ;CONFIGURE PORT 3
  MOV   P3, #PORT_3_DEFAULT_VALUE
  MOV   P3MDIN, #PORT_3_DEFAULT_IN
  MOV   P3MDOUT, #PORT_3_DEFAULT_OUT
  MOV   P3SKIP, #PORT_3_DEFAULT_SKIP
  ;CONFIGURE PORT 4
  MOV   P4, #PORT_4_DEFAULT_VALUE
  MOV   P4MDIN, #PORT_4_DEFAULT_IN
  MOV   P4MDOUT, #PORT_4_DEFAULT_OUT
  RET


;SHIFTS THE VALUE IN A LEFT BY THE NUMBER OF BITS SPECIFIED BY THE VALUE IN R0
;ON ENTRY:
; A   = VALUE TO SHIFT
; R0  = SHIFT COUNT
;ON RETURN:
; A   = SHIFTED VALUE
; R0  = 0x00
LPORTSHL:
  CLR		C
  RLC		A
  DJNZ	R0, LPORTSHL
  RET

;SHIFTS THE VALUE IN A RIGHT BY THE NUMBER OF BITS SPECIFIED BY THE VALUE IN R0
;ON ENTRY:
; A   = VALUE TO SHIFT
; R0  = SHIFT COUNT
;ON RETURN:
; A   = SHIFTED VALUE
; R0  = 0x00
LPORTSHR:
  CLR   C
  RRC   A
  DJNZ  R0, LPORTSHR
  RET

;PLACES THE SELECTED BIT OF THE SELECTED PORT INTO OPEN-DRAIN MODE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITOD	PROC
    JNB   ACC.3, LPORTBITODA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITODA:
    ;BIT VALID
    PUSh  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITODB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P0MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITODB:
    DJNZ  ACC, LPORTBITODC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITODC:
    DJNZ  ACC, LPORTBITODD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2MDOUT, A
    CLR   C
    CLR   A
    REt
  LPORTBITODD:
    DJNZ  ACC, LPORTBITODE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITODE:
    DJNZ  ACC, LPORTBITODF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P4MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITODF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;PLACES THE SELECTED BIT OF THE SELECTED PORT INTO PUSH-PULL MODE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTBITPP	PROC
    JNB   ACC.3, LPORTBITPPA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTBITPPA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTBITPPB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P0MDOUT, A
    CLR   C
    CLR   A
    RET 
  LPORTBITPPB:
    DJNZ  ACC, LPORTBITPPC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITPPC:
    DJNZ  ACC, LPORTBITPPD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITPPD:
    DJNZ  ACC, LPORTBITPPE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITPPE:
    DJNZ  ACC, LPORTBITPPF
    ;PORT 4
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P4MDOUT, A
    CLR   C
    CLR   A
    RET
  LPORTBITPPF:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;LOAD THE INPUT MODE REGISTER FOR THE SELECTED PORT
;WITH THE SPECIFIED VALUE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; R0            = VALUE
;ON RETURN:
; R0  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPORTMODEINWR	PROC
    SWAP  A
    JNZ   LPORTMODEINWRB
    ;PORT 0
    MOV   P0MDIN, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEINWRB:
    DJNZ  ACC, LPORTMODEINWRC
    ;PORT 1
    MOV   P1MDIN, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEINWRC:
    DJNZ  ACC, LPORTMODEINWRD
    ;PORT 2
    MOV   P2MDIN, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEINWRD:
    DJNZ  ACC, LPORTMODEINWRE
    ;PORT 3
    MOV   P3MDIN, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEINWRE:
    DJNZ  ACC, LPORTMODEINWRF
    ;PORT 4
    MOV   P4MDIN, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEINWRF:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;LOAD THE OUTPUT MODE REGISTER FOR THE SELECTED PORT
;WITH THE SPECIFIED VALUE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; R0            = VALUE
;ON RETURN:
; R0  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPORTMODEOUTWR	PROC
    SWAP  A
    JNZ   LPORTMODEOUTWRB
    ;PORT 0
    MOV   P0MDOUT, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEOUTWRB:
    DJNZ  ACC, LPORTMODEOUTWRC
    ;PORT 1
    MOV   P1MDOUT, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEOUTWRC:
    DJNZ  ACC, LPORTMODEOUTWRD
    ;PORT 2
    MOV   P2MDOUT, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEOUTWRD:
    DJNZ  ACC, LPORTMODEOUTWRE
    ;PORT 3
    MOV   P3MDOUT, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEOUTWRE:
    DJNZ  ACC, LPORTMODEOUTWRF
    ;PORT 4
    MOV   P4MDOUT, R0
    CLR   C
    CLR   A
    RET
  LPORTMODEOUTWRF:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;READS THE SKIP REGISTER FOR THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 IF SUCCESS
;   A   = 0x00
;   R0  = VALUE
; C = 1 IF FAIL
;   A   = ERROR CODE
;   R0  = 0x00
LPORTSKIPRD	PROC
    SWAP  A
    JNZ   LPORTSKIPRDB
    ;PORT 0
    MOV   R0, P0SKIP
    CLR   C
    CLR   A
    RET
  LPORTSKIPRDB:
    DJNZ  ACC, LPORTSKIPRDC
    ;PORT 1
    MOV   R0, P1SKIP
    CLR   C
    CLR   A
    RET
  LPORTSKIPRDC:
    DJNZ  ACC, LPORTSKIPRDD
    ;PORT 2
    MOV   R0, P2SKIP
    CLR   C
    CLR   A
    RET
  LPORTSKIPRDD:
    DJNZ  ACC, LPORTSKIPRDE
    ;PORT 3
    MOV   R0, P3SKIP
    CLR   C
    CLR   A
    RET
  LPORTSKIPRDE:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    MOV   R0, #0x00
    SETB  C
    RET
ENDP


;LOAD THE SKIP REGISTER FOR THE SELECTED PORT
;WITH THE SPECIFIED VALUE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; R0            = VALUE
;ON RETURN:
; R0  = VALUE ON ENTRY
; C   = 0 IF SUCCESS
;   A = 0x00
; C   = 1 IF FAIL
;   A = ERROR CODE
LPORTSKIPWR	PROC
    SWAP  A
    JNZ   LPORTSKIPWRB
    ;PORT 0
    MOV   P0SKIP, R0
    CLR   C
    CLR   A
    RET
  LPORTSKIPWRB:
    DJNZ  ACC, LPORTSKIPWRC
    ;PORT 1
    MOV   P1SKIP, R0
    CLR   C
    CLR   A
    RET
  LPORTSKIPWRC:
    DJNZ  ACC, LPORTSKIPWRD
    ;PORT 2
    MOV   P2SKIP, R0
    CLR   C
    CLR   A
    RET
  LPORTSKIPWRD:
    DJNZ  ACC, LPORTSKIPWRE
    ;PORT 3
    MOV   P3SKIP, R0
    CLR   C
    CLR   A
    RET
  LPORTSKIPWRE:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;PLACES THE SELECTED PORT INTO OPEN-DRAIN MODE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTOD	PROC
    SWAP  A
    JNZ   LPORTODB
    ;PORT 0
    MOV   P0MDOUT, #0x00
    CLR   C
    CLR   A
    RET
  LPORTODB:
    DJNZ  ACC, LPORTODC
    ;PORT 1
    MOV   P1MDOUT, #0x00
    CLR   C
    CLR   A
    RET
  LPORTODC:
    DJNZ  ACC, LPORTODD
    ;PORT 2
    MOV   P2MDOUT, #0x00
    CLR   C
    CLR   A
    RET
  LPORTODD:
    DJNZ  ACC, LPORTODE
    ;PORT 3
    MOV   P3MDOUT, #0x00
    CLR   C
    CLR   A
    RET
  LPORTODE:
    DJNZ  ACC, LPORTODF
    ;PORT 4
    MOV   P4MDOUT, #0x00
    CLR   C
    CLR   A
    RET
  LPORTODF:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;PLACES THE SELECTED PORT INTO PUSH-PULL MODE
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTPP	PROC
    SWAP  A
    JNZ   LPORTPPB
    ;PORT 0
    MOV   P0MDOUT, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTPPB:
    DJNZ  ACC, LPORTPPC
    ;PORT 1
    MOV   P1MDOUT, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTPPC:
    DJNZ  ACC, LPORTPPD
    ;PORT 2
    MOV   P2MDOUT, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTPPD:
    DJNZ  ACC, LPORTPPE
    ;PORT 3
    MOV   P3MDOUT, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTPPE:
    DJNZ  ACC, LPORTPPF
    ;PORT 4
    MOV   P4MDOUT, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTPPF:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;SKIPS ALL BITS OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTSKIPALL	PROC
    SWAP  A
    JNZ   LPORTSKIPALLB
    ;PORT 0
    MOV   P0SKIP, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTSKIPALLB:
    DJNZ  ACC, LPORTSKIPALLC
    ;PORT 1
    MOV   P1SKIP, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTSKIPALLC:
    DJNZ  ACC, LPORTSKIPALLD
    ;PORT 2
    MOV   P2SKIP, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTSKIPALLD:
    DJNZ  ACC, LPORTSKIPALLE
    ;PORT 3
    MOV   P3SKIP, #0xFF
    CLR   C
    CLR   A
    RET
  LPORTSKIPALLE:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;UNSKIPS ALL BITS OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTUNSKIPALL	PROC
    SWAP  A
    JNZ   LPORTUNSKIPALLB
    ;PORT 0
    MOV   P0SKIP, #0x00
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPALLB:
    DJNZ  ACC, LPORTUNSKIPALLC
    ;PORT 1
    MOV   P1SKIP, #0x00
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPALLC:
    DJNZ  ACC, LPORTUNSKIPALLD
    ;PORT 2
    MOV   P2SKIP, #0x00
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPALLD:
    DJNZ  ACC, LPORTUNSKIPALLE
    ;PORT 3
    MOV   P3SKIP, #0x00
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPALLE:
    ;INVALID PORT
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;CONFIGURES THE PORT TO SKIP THE SELECTED BIT OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTSKIPBIT  PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTSKIPBITA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTSKIPBITA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTSKIPBITB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    ORL   P0SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTSKIPBITB:
    DJNZ  ACC, LPORTSKIPBITC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P1SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTSKIPBITC:
    DJNZ  ACC, LPORTSKIPBITD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P2SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTSKIPBITD:
    DJNZ  ACC, LPORTSKIPBITE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    ORL   P3SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTSKIPBITE:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;CONFIGURES THE CROSSBAR TO NOT SKIP THE SELECTED BIT OF THE SELECTED PORT
;ON ENTRY:
; ACC.7 - ACC.4 = PORT NUMBER
; ACC.3 - ACC.0 = BIT NUMBER
;ON RETURN:
; C = 0 ON SUCCESS
;   A = 0x00
; C = 1 ON FAIL
;   A = ERROR CODE
LPORTUNSKIPBIT  PROC
    ;ENSURE BIT NUMBER IS VALID
    JNB   ACC.3, LPORTUNSKIPBITA
    ;INVALID BIT
    MOV   A, #PORT_ERR_INV_BIT
    SETB  C
    RET
  LPORTUNSKIPBITA:
    ;BIT VALID
    PUSH  ACC
    SWAP  A
    ANL   A, #0x0F
    JNZ   LPORTUNSKIPBITB
    ;PORT 0
    POP   ACC
    ANL   A, #0x07
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P0SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPBITB:
    DJNZ  ACC, LPORTUNSKIPBITC
    ;PORT 1
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P1SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPBITC:
    DJNZ  ACC, LPORTUNSKIPBITD
    ;PORT 2
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P2SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPBITD:
    DJNZ  ACC, LPORTUNSKIPBITE
    ;PORT 3
    POP   ACC
    ANL   A, #0x0F
    CALL  MATHBIU2XM1
    INC   A
    CPL   A
    ANL   P3SKIP, A
    CLR   C
    CLR   A
    RET
  LPORTUNSKIPBITE:
    ;INVALID PORT
    POP   ACC
    MOV   A, #PORT_ERR_INV_PORT
    SETB  C
    RET
ENDP


;PORT WIDTH TABLE
LPORTTABLE:
  ;ENTRY COUNT
  DB	0x05
  ;ENTRY LIST
  DB	0x08
  DB	0x08
  DB	0x08
  DB	0x08
  DB	0x08
